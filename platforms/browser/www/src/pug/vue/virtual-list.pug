extends ../_docs-template

block vars
  - var activeLink = 'vue';
  - var title = 'Virtual List Vue Component | Framework7 Vue Documentation';

block content

  .docs-nav
    include ../_docs-vue-menu
  .docs-content
    +improveDocsLink
    h1 Virtual List Vue Component
    .docs-index
    p Virtual List is not a separate Vue component, but just a particular case of using <a href="list-view.html">&lt;f7-list&gt;</a>, <a href="list-item.html">&lt;f7-list-item&gt;</a> Vue components and special Framework7's <a href="../docs/virtual-list.html">Virtual List</a> component.

    h2 Virutal List Properties
    table.params-table
      thead
        tr
          th Prop
          th Type
          th Default
          th Description
      tbody
        tr
          th(colspan="4") &lt;f7-list&gt; properties
        tr
          td virtual-list
          td boolean
          td false
          td Enables Virtual List
        tr
          td virtual-list-params
          td object
          td
          td Object with <a href="../docs/virtual-list.html#virtual-list-parameters">Virtual List Parameters</a>

    h2 Virutal List Events
    table.events-table
      thead
        tr
          th Event
          th Description
      tbody
        tr
          th(colspan="2") &lt;f7-list&gt; events
        tr
          td virtual:itembeforeinsert
          td Event will be triggered before item will be added to virtual document fragment
        tr
          td virtual:itemsbeforeinsert
          td Event will be triggered after current DOM list will be removed and before new document will be inserted
        tr
          td virtual:itemsafterinsert
          td Event will be triggered after new document fragment with items inserted
        tr
          td virtual:beforeclear
          td Event will be triggered before current DOM list will be removed and replaced with new document fragment

    h2 Access To Virtual List Instance
    p You can access Virtual List initialized instance by accessing <code><b>.f7VirtualList</b></code> &lt;f7-list&gt; component's property.

    h2 Examples
    p Here is the full page example with Virtual List and Searchbar to search through Virtual List items:
    pre
      code.html
        :code
          <template>
            <f7-page>
              <f7-navbar back-link="Back" title="Virtual List"></f7-navbar>
              <!--
                Searchbar to search thorugh VL Items
                List to search specified in "search-list" prop
              -->
              <f7-searchbar
                search-container="#search-list"
                search-item="li"
                search-in=".item-title"
              ></f7-searchbar>

              <!-- This block will become visible when there is nothing found -->
              <f7-list class="searchbar-not-found">
                <f7-list-item title="Nothing found"></f7-list-item>
              </f7-list>

              <!-- Search through this list -->
              <f7-list
                id="search-list"
                class="searchbar-found"
                media-list
                virtual-list
                :virtual-list-params="{ items: items, height: 63, searchAll: searchAll, renderExternal: renderExternal }"
                >
                <ul>
                  <!-- we will get the items we need to render from VL render external callback -->
                  <f7-list-item
                    v-for="(item, index) in vlData.items"
                    :key="index"
                    media-item
                    link="#"
                    :title="item.title"
                    :subtitle="item.subtitle"
                    :style="`top: ${vlData.topPosition}px`"
                  ></f7-list-item>
                </ul>
              </f7-list>
            </f7-page>
          </template>
          <script>
            export default {
              data: function () {
                var items = [];
                for (var i = 1; i <= 10000; i++) {
                  items.push({
                    title: 'Item ' + i,
                    subtitle: 'Subtitle ' + i
                  });
                }
                return {
                  items: items,
                  vlData: {},
                };
              },
              methods: {
                // Function to proceed search results
                searchAll: function (query, items) {
                  var found = [];
                  for (var i = 0; i < items.length; i += 1) {
                      if (items[i].title.toLowerCase().indexOf(query) >= 0 || query.trim() === '') found.push(i);
                  }
                  return found; // return array with mathced indexes
                },
                renderExternal(vl, vlData) {
                  this.vlData = vlData;
                },
              },
            }
          </script>
