extends ../_docs-template

block vars
  - var activeLink = 'vue';
  - var title = 'Navigation Router | Framework7 Vue Documentation';

block content

  .docs-nav
    include ../_docs-vue-menu
  .docs-content
    +improveDocsLink
    h1 Navigation Router
    p Framework7-Vue as Framework7 itself comes with powerful and flexible router. And to make it work we must specify <a href="../docs/routes.html">Routes</a>.
    p The only difference in Framework7-Vue is that in Vue.js we are already composing our application with Vue components, so we need to map our Pages-Vue components to the routes. It can be done by passing Vue component in <code>component</code> property of the route. Here's a basic example:
    pre
      code.html
        :code
          <!-- Current View/Router -->
          <f7-view>
            <!-- Initial Page -->
            <f7-page>
              ...
              <f7-link href="/about/">About App</f7-link>
              <f7-link href="/login/">Login</f7-link>
            </f7-page>
          </f7-view>
    p Now we need to map components to routes. It should be done in <code>routes</code> parameter on <a href="init-app.html">App Initialization</a>, or for each View separately:
    pre
      code.js
        :code
          // Create Component for About page
          Vue.component('page-about', {
              template: '<f7-page name="about">...</f7-page>'
          })
          // Create Component for Login page
          Vue.component('page-login', {
              template: '<f7-page name="login">...</f7-page>'
          })

          // Init App
          new Vue({
            el: '#app',
            framework7: {
              // Map routes
              routes: [
                {
                  path: '/about/',
                  component: 'page-about'
                },
                {
                  path: '/login/',
                  component: 'page-login'
                }
              ]
            }
          })
    p If you use single file components (with Webpack, Rollup or other bundler):
    pre
      code.html
        :code
          <!-- about.vue -->
          <template>
            <f7-page name="about">
              <!-- Page content -->
            </f7-page>
          </template>
          <script>
            export default {}
          </script>

          <!-- login.vue -->
          <template>
            <f7-page name="login">
              <!-- Page content -->
            </f7-page>
          </template>
          <script>
            export default {}
          </script>
    pre
      code.js
        :code
          import AboutPage from 'about.vue'
          import LoginPage from 'login.vue'

          // Init App
          new Vue({
            el: '#app',
            framework7: {
              root: '#app',
              // Map routes
              routes: [
                {
                  path: '/about/',
                  component: AboutPage
                },
                {
                  path: '/login/',
                  component: LoginPage
                }
              ]
            }
          })
    .important-note
      p Check the full <a href="../docs/routes.html">Routes Documentation</a> to know about all possible routes options, how to use <a href="../docs/routes.html#nested-routes">Nested Routes</a>, <a href="../docs/routes.html#routable-tabs">Routable Tabs</a> and <a href="../docs/routes.html#routable-modals">Routable Modals</a>.
    h2 Router API
    p To access router instance and use <a href="../docs/view.html#router-api-methods-properties">Router API</a> you can use special <b>$f7router</b> property of component:
    pre
      code.html
        :code
          <f7-link @click="$f7router.navigate('/about/')">About</f7-link>
          <f7-link @click="$f7router.back()">Go Back</f7-link>
    .important-note
      p Please note, that <code>$f7route</code> and <code>$f7router</code> component properties are only available inside of custom page components (and their child components) that you load according to routes. In parent components (like in View, or where you init your Vue app instance) they are not accessible as your app may have few routers (Views) at a time. So in this case use access to initialized <a href="view.html#access-to-view-instance">View Instance</a>, e.g. <code>$f7.views.main.router</code>
